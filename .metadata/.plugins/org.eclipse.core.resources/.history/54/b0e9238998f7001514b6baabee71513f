
/*
 * Brandon Russeau
 * COSC 423
 * Virtual Memory Page Replacement Project
 * Least Frequently Used replacement algorithm
 */

import java.util.ArrayList;
import java.util.Scanner;

public class LFU {
	int frames, pointer = 0, fault = 0, refLen;
	Boolean isFull = false;
	Scanner scan = null;
	int buffer[];
	ArrayList<Integer> referenceString = new ArrayList<Integer>();
	int reference[];
	int pages[][];

	public LFU(ArrayList<Integer> referenceString, int frames) {

		this.frames = frames;

		refLen = referenceString.size();

		reference = new int[refLen];
		pages = new int[refLen][frames];
		buffer = new int[frames];
		for (int j = 0; j < frames; j++)
			buffer[j] = -1;

		System.out.println("LFU: ");
		System.out.print("The reference string: ");
		for (int value : referenceString) {
			System.out.print(value + " ");
		}
		System.out.println();

		for (int i = 0; i < refLen; i++) {
			reference[i] = referenceString.get(i);
		}
		System.out.println();
	}

	public int getFaults() {
		return this.fault;
	}

	public void lfuAlgo() {
		for (int i = 0; i < refLen; i++) {
			if (referenceString.contains(reference[i])) {
				referenceString.remove(referenceString.indexOf(reference[i]));
			}
			referenceString.add(reference[i]);
			int search = -1;
			for (int j = 0; j < frames; j++) {
				if (buffer[j] == reference[i]) {
					search = j;
					break;
				}
			}
			// if (search == -1) {
			if (isFull) {
				int index = refLen;
				for (int j = 0; j < frames; j++) {
					if (referenceString.contains(buffer[j])) {
						int temp = referenceString.indexOf(buffer[j]);
						if (temp < index) {
							index = temp;
							pointer = j;
						}
					}
				}
			}
			buffer[pointer] = reference[i];
			fault++;
			pointer++;
			if (pointer == frames) {
				pointer = 0;
				isFull = true;
			}
			// }
			for (int j = 0; j < frames; j++)
				pages[i][j] = buffer[j];
		}

		if (refLen > 80) {
			for (int i = 0; i < frames; i++) {
				for (int j = 0; j < 78; j++)
					System.out.printf("%3d ", pages[j][i]);
				System.out.println();
			}

			System.out.println();
			for (int i = 0; i < frames; i++) {
				for (int j = 78; j < refLen; j++)
					System.out.printf("%3d ", pages[j][i]);
				System.out.println();
			}

		} else {
			for (int i = 0; i < frames; i++) {
				for (int j = 0; j < refLen; j++)
					System.out.printf("%3d ", pages[j][i]);
				System.out.println();
			}
		}

		System.out.println();
	}
}
